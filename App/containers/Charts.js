'use strict'import React, { Component } from 'react'import { StyleSheet, View, Text, Platform, Image, TouchableOpacity, Animated,Dimensions } from 'react-native'import { SquarePagerView, TrianglePagerView, CirclePagerView } from './Item'import { IndicatorViewPager,PagerTitleIndicator } from 'rn-viewpager'import Echarts from 'react-native-web-echarts'const {height,width} = Dimensions.get('window');export default class TitleIndicatorPage extends Component {    state = {        bgColor: new Animated.Value(0),        gaugeValue:0,        line:{        }    }    _setBgColor = Animated.event([{bgColor: this.state.bgColor}])    state1 = {        data1: [1, 2, 3, 4],        data2: [2, 4, 6, 8],        data3: [1, 2, 3, 4]    }    componentWillMount() {        setInterval((function() {            this.setState({                gaugeValue: (Math.random() * 100).toFixed(2) - 0            })        }).bind(this), 1000)    }    render () {        let bgColor = this.state.bgColor.interpolate({            inputRange: [0, 1, 2 , 3 , 4, 5 , 6 , 7, 8],            outputRange: ['hsl(187, 74%, 90%)', 'hsl(89, 47%, 90%)', 'hsl(12, 97%, 90%)','hsl(32, 97%, 90%)','hsl(72, 97%, 90%)','hsl(212, 97%, 90%)','hsl(332, 97%, 90%)','hsl(1, 97%, 90%)','hsl(200, 97%, 90%)']        })        //仪表图        var option2 = {            tooltip : {                formatter: "{a} <br/>{b} : {c}%"            },            toolbox: {                feature: {                    restore: {},                    saveAsImage: {}                }            },            series: [                {                    name: '业务指标',                    type: 'gauge',                    detail: {formatter:'{value}%'},                    data: [{value: this.state.gaugeValue, name: '完成率'}]                }            ]        };        //折线图        var option3 = {            title: {                text: '折线图堆叠'            },            tooltip: {                trigger: 'axis'            },            legend: {                data:['邮件营销','联盟广告','视频广告','直接访问','搜索引擎']            },            grid: {                left: '3%',                right: '4%',                bottom: '3%',                containLabel: true            },            toolbox: {                feature: {                    saveAsImage: {}                }            },            xAxis: {                type: 'category',                boundaryGap: false,                data: ['周一','周二','周三','周四','周五','周六','周日']            },            yAxis: {                type: 'value'            },            series: [                {                    name:'邮件营销',                    type:'line',                    stack: '总量',                    data:[120, 132, 101, 134, 90, 230, 210]                },                {                    name:'联盟广告',                    type:'line',                    stack: '总量',                    data:[220, 182, 191, 234, 290, 330, 310]                },                {                    name:'视频广告',                    type:'line',                    stack: '总量',                    data:[150, 232, 201, 154, 190, 330, 410]                },                {                    name:'直接访问',                    type:'line',                    stack: '总量',                    data:[320, 332, 301, 334, 390, 330, 320]                },                {                    name:'搜索引擎',                    type:'line',                    stack: '总量',                    data:[820, 932, 901, 934, 1290, 1330, 1320]                }            ]        };        const { data1, data2, data3 } = this.state1        const option = {            title: {                text: '样图'            },            tooltip: {},            angleAxis: {            },            radiusAxis: {                type: 'category',                data: ['周一', '周二', '周三', '周四'],                z: 10            },            polar: {            },            series: [{                type: 'bar',                data: data1,                coordinateSystem: 'polar',                name: 'A',                stack: 'a'            }, {                type: 'bar',                data: data2,                coordinateSystem: 'polar',                name: 'B',                stack: 'a'            }, {                type: 'bar',                data: data3,                coordinateSystem: 'polar',                name: 'C',                stack: 'a'            }],            legend: {                show: true,                data: ['A', 'B', 'C'],                right: 0            }        }        return (            <View style={styles.container}>            <Animated.View style={{flex: 1, backgroundColor: bgColor}} >                <View >                    {Platform.OS === 'ios' && <View style={styles.statusBar} />}                    <View style={styles.toolbarContainer} >                        <TouchableOpacity onPress={() => this.props.navigator.pop()} >                            <Image style={styles.backImg} source={require('../../img/back_arrow.png')} />                        </TouchableOpacity>                        <Text style={styles.titleTxt} >eCharts</Text>                    </View>                </View>                <IndicatorViewPager                    style={{flex:1,flexDirection: 'column-reverse'}}                    indicator={this._renderTitleIndicator()}                    onPageScroll={this._onPageScroll.bind(this)}                >                    {                        <View style={{width:width,height:height,justifyContent:'center',alignItems:'center'}}>                            <Echarts                                option={option}                                height={400}                            />                        </View>                    }                    {                        //仪表图                        <View style={{width:width,height:height,justifyContent:'center',alignItems:'center'}}>                            <Echarts                                option={option2}                                height={400}                            />                        </View>                    }                    {                        //折线图                        <View style={{width:width,height:height,justifyContent:'center',alignItems:'center'}}>                            <Echarts                                option={option3}                                height={400}                                width={width}                            />                        </View>                    }                    {SquarePagerView()}                    {CirclePagerView()}                    {TrianglePagerView()}                    {SquarePagerView()}                    {CirclePagerView()}                    {TrianglePagerView()}                </IndicatorViewPager>            </Animated.View>            </View>        )    }    _renderTitleIndicator () {        return (            <PagerTitleIndicator                style={styles.indicatorContainer}                trackScroll={true}                itemTextStyle={styles.indicatorText}                itemStyle={{width:width/4}}                selectedItemStyle={{width:width/4}}                selectedItemTextStyle={styles.indicatorSelectedText}                selectedBorderStyle={styles.selectedBorderStyle}                titles={['试例图', '仪表图','折线图','饼状图', '散点图','TRIANGLE','SQUARE', 'CIRCLE','TRIANGLE']}            />        )    }    _onPageScroll (scrollData) {        let {offset, position} = scrollData        if (position < 0 || position > 8) return        this._setBgColor({bgColor: offset + position})    }}const styles = StyleSheet.create({    container:{        flex:1,        backgroundColor:'transparent',    },    indicatorContainer: {        backgroundColor: 0x00000020,        height: 48    },    indicatorText: {        fontSize: 14,        color: 0xFFFFFF99    },    indicatorSelectedText: {        fontSize: 14,        color: 0xFFFFFFFF    },    selectedBorderStyle: {        height: 3,        backgroundColor: 'white'    },    statusBar: {        height: 24,        backgroundColor: 0x00000044    },    toolbarContainer: {        height: 56,        backgroundColor: 0x00000020,        flexDirection: 'row',        alignItems: 'center',        paddingHorizontal: 16    },    backImg: {        width: 16,        height: 17    },    titleTxt: {        marginLeft: 36,        color: 'white',        fontSize: 20    }})