'use strict'import React, { Component } from 'react'import {connect} from 'react-redux';import { StyleSheet, View, Text, Platform, Image, TouchableOpacity, Animated,Dimensions } from 'react-native'import { SquarePagerView, TrianglePagerView, CirclePagerView } from './Item'import { IndicatorViewPager,PagerTitleIndicator } from 'rn-viewpager'import Echarts from 'react-native-web-echarts'import Config from '../../config';import Proxy from '../proxy/Proxy'import SampleChart from '../components/charts/SampleChart'import GaugeChart from '../components/charts/GaugeChart'import BarChart from '../components/charts/BarChart'import PieChart from '../components/charts/PieChart'import ScatterChart from '../components/charts/ScatterChart'const {height,width} = Dimensions.get('window');export default class Charts extends Component {    state = {        bgColor: new Animated.Value(0),    }    _setBgColor = Animated.event([{bgColor: this.state.bgColor}])    componentWillMount() {        Proxy.postes({            url: Config.server + '/func/webFramework/getSensorParameter',            headers: {                'Authorization': "Bearer " + this.props.accessToken,                'Content-Type': 'application/json'            },            body: {            }        }).then((json)=>{            if(json.re == 1){            }        }).catch((e)=>{        })    }    render () {        let bgColor = this.state.bgColor.interpolate({            inputRange: [0, 1, 2 , 3 , 4, 5 , 6 , 7, 8],            outputRange: ['hsl(187, 74%, 90%)', 'hsl(89, 47%, 90%)', 'hsl(12, 97%, 90%)','hsl(32, 97%, 90%)','hsl(72, 97%, 90%)','hsl(212, 97%, 90%)','hsl(332, 97%, 90%)','hsl(1, 97%, 90%)','hsl(200, 97%, 90%)']        })        return (            <View style={styles.container}>            <Animated.View style={{flex: 1, backgroundColor: bgColor}} >                <View >                    {Platform.OS === 'ios' && <View style={styles.statusBar} />}                    <View style={styles.toolbarContainer} >                        <TouchableOpacity onPress={() => this.props.navigator.pop()} >                            <Image style={styles.backImg} source={require('../../img/back_arrow.png')} />                        </TouchableOpacity>                        <Text style={styles.titleTxt} >eCharts</Text>                    </View>                </View>                <IndicatorViewPager                    style={{flex:1,flexDirection: 'column-reverse'}}                    indicator={this._renderTitleIndicator()}                    onPageScroll={this._onPageScroll.bind(this)}                >                    {/*组件化*/}                    {<SampleChart/>}                    {<GaugeChart/>}                    {<BarChart/>}                    {<PieChart/>}                    {<ScatterChart/>}                    {TrianglePagerView()}                    {SquarePagerView()}                    {CirclePagerView()}                    {TrianglePagerView()}                </IndicatorViewPager>            </Animated.View>            </View>        )    }    _renderTitleIndicator () {        return (            <PagerTitleIndicator                style={styles.indicatorContainer}                trackScroll={true}                itemTextStyle={styles.indicatorText}                itemStyle={{width:width/4}}                selectedItemStyle={{width:width/4}}                selectedItemTextStyle={styles.indicatorSelectedText}                selectedBorderStyle={styles.selectedBorderStyle}                titles={['试例图', '仪表图','柱状图','饼状图', '散点图','TRIANGLE','SQUARE', 'CIRCLE','TRIANGLE']}            />        )    }    _onPageScroll (scrollData) {        let {offset, position} = scrollData        if (position < 0 || position > 8) return        this._setBgColor({bgColor: offset + position})    }}const styles = StyleSheet.create({    container:{        flex:1,        backgroundColor:'transparent',    },    indicatorContainer: {        backgroundColor: 0x00000020,        height: 48    },    indicatorText: {        fontSize: 14,        color: 0xFFFFFF99    },    indicatorSelectedText: {        fontSize: 14,        color: 0xFFFFFFFF    },    selectedBorderStyle: {        height: 3,        backgroundColor: 'white'    },    statusBar: {        height: 24,        backgroundColor: 0x00000044    },    toolbarContainer: {        height: 56,        backgroundColor: 0x00000020,        flexDirection: 'row',        alignItems: 'center',        paddingHorizontal: 16    },    backImg: {        width: 16,        height: 17    },    titleTxt: {        marginLeft: 36,        color: 'white',        fontSize: 20    }})module.exports = connect(state=>({        accessToken:state.user.accessToken,    }))(Charts);