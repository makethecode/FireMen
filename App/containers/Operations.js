'use strict'import React, { Component } from 'react'import {connect} from 'react-redux';import { StyleSheet, View, Text, Platform, Image, TouchableOpacity, Animated,Dimensions } from 'react-native'import { SquarePagerView, TrianglePagerView, CirclePagerView } from './Item'import { IndicatorViewPager,PagerTitleIndicator } from 'rn-viewpager'import Echarts from 'react-native-web-echarts'import Config from '../../config';import Proxy from '../proxy/Proxy'import MapView from '../components/operations/MapView'const {height,width} = Dimensions.get('window');export default class Operations extends Component {    state = {        gaugeValue:0,    }    componentWillMount() {    }    render () {        return (            <View style={styles.container}>            <View style={{flex: 1, backgroundColor: '#2478a7'}} >                <View >                    {Platform.OS === 'ios' && <View style={styles.statusBar} />}                    <View style={styles.toolbarContainer} >                        <Text style={styles.titleTxt} >业务应用</Text>                    </View>                </View>                <IndicatorViewPager                    style={{flex:1,flexDirection: 'column-reverse'}}                    indicator={this._renderTitleIndicator()}                    onPageScroll={this._onPageScroll.bind(this)}                >                    <MapView/>                    <MapView/>                    <MapView/>                    <MapView/>                    <MapView/>                </IndicatorViewPager>            </View>            </View>        )    }    _renderTitleIndicator () {        return (            <PagerTitleIndicator                style={styles.indicatorContainer}                trackScroll={true}                itemTextStyle={styles.indicatorText}                itemStyle={{width:width/4}}                selectedItemStyle={{width:width/4}}                selectedItemTextStyle={styles.indicatorSelectedText}                selectedBorderStyle={styles.selectedBorderStyle}                titles={['拓扑视图', '数据查询','门限告警','策略管理', '设备控制']}            />        )    }    _onPageScroll (scrollData) {        let {offset, position} = scrollData        if (position < 0 || position > 4) return    }}const styles = StyleSheet.create({    container:{        flex:1,        backgroundColor:'transparent',    },    indicatorContainer: {        backgroundColor: 0x00000020,        height: 48    },    indicatorText: {        fontSize: 14,        color: 0xFFFFFF99    },    indicatorSelectedText: {        fontSize: 14,        color: 0xFFFFFFFF    },    selectedBorderStyle: {        height: 3,        backgroundColor: 'white'    },    statusBar: {        height: 24,        backgroundColor: 0x00000044    },    toolbarContainer: {        height: 56,        backgroundColor: 0x00000020,        flexDirection: 'row',        alignItems: 'center',        paddingHorizontal: 16    },    backImg: {        width: 16,        height: 17    },    titleTxt: {        marginLeft: 36,        color: 'white',        fontSize: 20    }})module.exports = connect(state=>({        accessToken:state.user.accessToken,    }))(Operations);